image: node:22.16-alpine

stages:
  - test
  - release

variables:
  POSTGRES_DB: iluminatti
  POSTGRES_USER: iluminatti
  POSTGRES_PASSWORD: notsecure
  POSTGRES_HOST_AUTH_METHOD: trust
  API_TS_VERSION: v1.0ts
  API_PY_VERSION: v1.2py
  API_GQL_PY_VERSION: v1.3-gql-py

default:
  services:
    - name: postgres:14-alpine
      alias: pg-server
  before_script:
    - apk add postgresql
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - psql -h pg-server -U "$POSTGRES_USER" -d "$POSTGRES_DB" < resources/postgresql/initdb.d/0_db_init.sql
    - psql -h pg-server -U "$POSTGRES_USER" -d "$POSTGRES_DB" < resources/postgresql/initdb.d/data_survey_001.sql
    - psql -h pg-server -U "$POSTGRES_USER" -d "$POSTGRES_DB" < resources/postgresql/initdb.d/data_survey_002.sql
    - psql -h pg-server -U "$POSTGRES_USER" -d "$POSTGRES_DB" < resources/postgresql/initdb.d/data_survey_003.sql
    - psql -h pg-server -U "$POSTGRES_USER" -d "$POSTGRES_DB" < resources/postgresql/initdb.d/zz_create_views.sql

job::integration::tests::v1.0:
  stage: test
  variables:
    NODE_ENV: development
    DB_HOST: pg-server
    DB_NAME: iluminatti
    DB_USER_NAME: iluminatti
    DB_USER_PASS: notsecure
  script:
    - cd code/surveys-status-1.0
    - npm ci
    - npm run test
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: code/surveys-status-1.0/coverage/cobertura-coverage.xml
    paths:
      - code/surveys-status-1.0/coverage/lcov-report/
      
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'

job::integration::tests::v1.2:
  stage: test
  image: python:3.13-alpine
  variables:
    APP_DB_HOST: pg-server
    APP_DB_NAME: iluminatti
    APP_DB_USER_NAME: iluminatti
    APP_DB_USER_PASS: notsecure   
  script:
    - cd code/surveys-status-1.2
    - pip install pipenv
    - pipenv install --dev
    - pipenv run tests
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: code/surveys-status-1.2/coverage-report/coverage.xml
    paths:
      - code/surveys-status-1.2/coverage-report
  coverage: '/TOTAL.*?(\d+%)$/'


job::release::api::v1.0:
  stage: release
  image: docker:cli
  services:
    - docker:dind
  cache:
    key: node-modules-$CI_COMMIT_SHORT_SHA
    paths:
      - code/surveys-status-1.0/node_modules/
  variables:
    DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}:${API_TS_VERSION}-${CI_COMMIT_BRANCH}
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -f resources/app/Dockerfile --pull --target api --tag "${DOCKER_IMAGE_NAME}" .
    - docker push "${DOCKER_IMAGE_NAME}"
    - |
      if [[ "${CI_COMMIT_BRANCH}" == "${CI_DEFAULT_BRANCH}" ]]; then
        docker tag "${DOCKER_IMAGE_NAME}" "${CI_REGISTRY_IMAGE}:${API_TS_VERSION}-latest"
        docker push "${CI_REGISTRY_IMAGE}:${API_TS_VERSION}-latest"
      fi
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - resources/app/Dockerfile

job::release::api::v1.2py:
  stage: release
  image: docker:cli
  services:
    - docker:dind
  cache: []
  variables:
    DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}:${API_PY_VERSION}-${CI_COMMIT_BRANCH}
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -f resources/app/surveys.status.Dockerfile --pull --tag "${DOCKER_IMAGE_NAME}" .
    - docker push "${DOCKER_IMAGE_NAME}"
    - |
      if [[ "${CI_COMMIT_BRANCH}" == "${CI_DEFAULT_BRANCH}" ]]; then
        docker tag "${DOCKER_IMAGE_NAME}" "${CI_REGISTRY_IMAGE}:${API_PY_VERSION}-latest"
        docker push "${CI_REGISTRY_IMAGE}:${API_PY_VERSION}-latest"
      fi
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - resources/app/surveys.status.Dockerfile

job::release::api::v1.3-gql-py:
  stage: release
  image: docker:cli
  services:
    - docker:dind
  cache: []
  variables:
    DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}:${API_GQL_PY_VERSION}-${CI_COMMIT_BRANCH}
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -f resources/app/surveys.status.gql.Dockerfile --pull --tag "${DOCKER_IMAGE_NAME}" .
    - docker push "${DOCKER_IMAGE_NAME}"
    - |
      if [[ "${CI_COMMIT_BRANCH}" == "${CI_DEFAULT_BRANCH}" ]]; then
        docker tag "${DOCKER_IMAGE_NAME}" "${CI_REGISTRY_IMAGE}:${API_GQL_PY_VERSION}-latest"
        docker push "${CI_REGISTRY_IMAGE}:${API_GQL_PY_VERSION}-latest"
      fi
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - resources/app/surveys.status.gql.Dockerfile
