image: node:22.16-alpine

variables:
  POSTGRES_DB: iluminatti
  POSTGRES_USER: iluminatti
  POSTGRES_PASSWORD: notsecure
  POSTGRES_HOST_AUTH_METHOD: trust
  NODE_ENV: production
  DB_HOST: pg-server
  DB_NAME: iluminatti
  DB_USER_NAME: iluminatti
  DB_USER_PASS: notsecure

services:
  - name: postgres:14-alpine
    alias: pg-server

data::load:
  stage: build
  image: postgres:14-alpine
  script:
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - psql -h "$DB_HOST" -U "$DB_USER_NAME" -d "$DB_NAME" < resources/postgresql/initdb.d/0_db_init.sql
    - psql -h "$DB_HOST" -U "$DB_USER_NAME" -d "$DB_NAME" < resources/postgresql/initdb.d/data_survey_001.sql
    - psql -h "$DB_HOST" -U "$DB_USER_NAME" -d "$DB_NAME" < resources/postgresql/initdb.d/data_survey_002.sql
    - psql -h "$DB_HOST" -U "$DB_USER_NAME" -d "$DB_NAME" < resources/postgresql/initdb.d/data_survey_003.sql
    - psql -h "$DB_HOST" -U "$DB_USER_NAME" -d "$DB_NAME" < resources/postgresql/initdb.d/zz_create_views.sql


npm::install:
  cache:
    key: node-modules-$CI_COMMIT_SHORT_SHA
    paths:
      - node_modules/
      - code/backend/node_modules/
  stage: build
  before_script:
    - cd code/backend
  script:
    - npm ci
  after_script:
    - ls -la node_modules

integration::test:
  cache:
    key: node-modules-$CI_COMMIT_SHORT_SHA
    paths:
      - node_modules/
      - code/backend/node_modules/
  needs:
    - data::load
    - npm::install
  before_script:
    - cd code/backend
    - ls -la node_modules
  script:
    - npm run test
  artifacts:
    paths:
      - "coverage/lcov-report/"

